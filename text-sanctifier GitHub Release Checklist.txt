#  text-sanctifier GitHub Release Checklist

## NPM Publish Checklist
- [ ]  Bump version in `package.json` (patch / minor / major as needed).
- [ ]  Pass all tests: `node tests/sanctifyText.test.js`.
- [ ]  Run `npm pack` and verify that only intended files (`src/`, `dist/`, `LICENSE.md`, `README.md`) are included.
- [ ]  Final check: README.md, LICENSE.md, and CREDITS (if any).
- [ ]  Publish to NPM: `npm publish --access public`.
- [ ]  Push commits and create a Git tag:  
      `git add . && git commit -m "Release vX.Y.Z" && git tag vX.Y.Z && git push && git push origin vX.Y.Z`.
- [ ]  Generate fresh Shields.io badges (npm version, bundle size, license, etc.).



****
Unpublish Command (only <72h, <300 downloads)
npm unpublish text-sanctifier@1.0.0
npm unpublish text-sanctifier@1.0.1
npm unpublish text-sanctifier@1.0.2
npm unpublish text-sanctifier@1.0.3

****
Deprecate Command (always possible)
npm deprecate text-sanctifier@1.0.0 "⚠️ This version is outdated. Please upgrade to 1.0.4."
npm deprecate text-sanctifier@1.0.1 "⚠️ This version is outdated. Please upgrade to 1.0.4."
npm deprecate text-sanctifier@1.0.2 "⚠️ This version is outdated. Please upgrade to 1.0.4."
npm deprecate text-sanctifier@1.0.3 "⚠️ This version is outdated. Please upgrade to 1.0.4."


---

## GitHub Release Checklist
- [ ]  Create a new GitHub Release: [GitHub Releases page](https://github.com/iWhatty/text-sanctifier/releases).
- [ ]  Title: `vX.Y.Z` (matching your tag and npm version).
- [ ]  Release Notes:
  - Brief changelog (new features, fixes, breaking changes).
  - Mention bundle size (e.g., `0.70 KB minified / 0.43 KB gzipped`).
  - Highlight if any build target changes (ES2020, ESM, etc.).
- [ ]  Attachments (optional, usually not needed):
  - You typically don't need to upload `.js` files if already in repo.
  - Just link to the source code from the release.
- [ ]  Double-check linked assets: Source code `.zip` and `.tar.gz` are auto-generated.
- [ ]  Confirm and publish release.

---

## Best Practices
- Keep releases lightweight and clean (no `.gz` uploads).
- Stick to semver (`major.minor.patch`) in both tags and release titles.
- Always publish from a tested, clean state (tests passing, build verified).
- Keep README badges up to date after publishing.
- Prefer manual curated Release Notes — not autogenerated ones — for quality.

---
