import { summonSanctifier } from '../dist/text-sanctifier.min.js';


// We'll create multiple sanitizers to simulate the options
const strictSanctify = summonSanctifier.strict;
const looseSanctify = summonSanctifier.loose;

const customSanctify = summonSanctifier({
  purgeInvisibleChars: true,
  normalizeNewlines: true,
  collapseNewLines: true,
  collapseSpaces: true,
  trimSpacesAroundNewlines: true,
  nukeControls: true,
  finalTrim: true,
});

const aggressiveSanctifier = summonSanctifier({
  purgeInvisibleChars: true,
  preserveParagraphs: false,
  normalizeNewlines: true,
  collapseNewLines: true,
  collapseSpaces: true,
  nukeControls: true,
  trimSpacesAroundNewlines: true,
  finalTrim: true,
});


function assertEqual(actual, expected, message) {
  if (actual !== expected) {
    console.error(`‚ùå ${message}\n  Expected: "${expected}"\n  Received: "${actual}"`);
    process.exitCode = 1;
  } else {
    console.log(`‚úÖ ${message}`);
  }
}

console.log('Running text-sanctifier dist tests...');

// 1. Basic invisible character purge
assertEqual(
  customSanctify('Hello\u200BWorld'),
  'HelloWorld',
  '1. Purge zero-width space'
);

// 2. Normalize CRLF line endings
assertEqual(
  customSanctify('Line1\r\nLine2\rLine3'),
  'Line1\nLine2\nLine3',
  '2. Normalize line endings to Unix \\n'
);

// 3. Collapse multiple spaces (using strict)
assertEqual(
  strictSanctify('Hello   World'),
  'Hello World',
  '3. Collapse multiple spaces into one (strict)'
);

// 4. Collapse multiple newlines (loose)
assertEqual(
  looseSanctify('Line1\n\n\nLine2'),
  'Line1\n\nLine2',
  '4. Preserve paragraph breaks (2 newlines) (loose)'
);

// 5. Summoned sanitizer (aggressive)
assertEqual(
  aggressiveSanctifier('A\t\n\n\u0008B'),
  'A\nB',
  '5. Aggressively nuke control chars and collapse newlines'
);

// 6. Trim spaces around newlines
assertEqual(
  customSanctify('Line1   \n   Line2'),
  'Line1\nLine2',
  '6. Trim spaces around newlines'
);

// 7. Preserve tabs even when collapsing spaces
assertEqual(
  strictSanctify('Hello\t\tWorld'),
  'Hello\t\tWorld',
  '7. Preserve tabs even in strict mode'
);

// 8. Purge mixed Unicode junk
assertEqual(
  customSanctify('\u200B\u200C\u200D Hello\u200F\u202DWorld\u202E'),
  'HelloWorld',
  '8. Purge diverse invisible Unicode trash'
);

// 9. Collapse 6+ newlines into paragraph break
assertEqual(
  looseSanctify('A\n\n\n\n\n\nB'),
  'A\n\nB',
  '9. Collapse 6+ newlines into \\n\\n paragraph'
);

// 10. No collapse when paragraph preservation off
assertEqual(
  strictSanctify('X\n\nY'),
  'X\nY',
  '10. Collapse double newline to single (strict)'
);

// 11. Fully purge ghost characters
const ghostInput = 'A\u200B\u200C\u200D\u2060\uFEFF\u200E\u200F\u202A\u202E\u00A0B';
assertEqual(
  customSanctify(ghostInput),
  'AB',
  '11. Ghostproof: Fully purge invisible Unicode'
);







// 12. Keyboard-onlyEmoji: preserve ASCII + emojis, strip non-keyboard extras
const keyboardEmojiSanctifier = summonSanctifier.keyboardOnlyEmoji;

assertEqual(
  keyboardEmojiSanctifier('Hello ‚Äî World üòä üëΩ ùåÜ ‚ÄºÔ∏è'),
  'Hello - World üòä üëΩ  ‚ÄºÔ∏è',
  '12. keyboardOnlyEmoji: normalize dashes and preserve emojis'
);

// 13. Keyboard-onlyEmoji: normalize smart quotes and dashes
assertEqual(
  keyboardEmojiSanctifier(`‚ÄúHello‚Äù‚Äî‚ÄòWorld‚Äô`),
  '"Hello"-\'World\'',
  '13. keyboardOnlyEmoji: normalize smart quotes and dashes'
);

// 14. Keyboard-only strict: purge emojis and normalize symbols
const keyboardStrict = summonSanctifier.keyboardOnly;

assertEqual(
  keyboardStrict('Hi üòä ‚Äî ‚Äúthere‚Äù! üëã'),
  'Hi - "there"!',
  '14. keyboardOnly: emojis removed, symbols normalized, spaces collapsed'
);

// 15. Keyboard-onlyEmoji: normalize full-width ASCII punctuation
assertEqual(
  keyboardEmojiSanctifier('Ôº®ÔΩÖÔΩåÔΩåÔΩèÔºÅÔº∑ÔΩèÔΩíÔΩåÔΩÑÔºü'),
  'Hello!World?',
  '15. keyboardOnlyEmoji: full-width punctuation normalized'
);








console.log('All dist tests finished.');
